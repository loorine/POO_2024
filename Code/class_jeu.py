from class_plateau import Plateau


class Jeu:
    
    
    def __init__(self):
        """ Constructeur de la classe. 2 attributs.
            1 plateau
            1 bool√©en pour savoir si le jeu est en cours ou non
        """
        self.plateau = None
        self.jeu_en_cours = False
     
        

    def demarrer_partie(self, choix):
        """ Lance une nouvelle partie en fonction du niveau de difficult√© choisi.
            Le niveau de difficult√© d√©finit la taille du plateau et le nombre de bombes.
            Cr√©√© √©galement le tableau avec les r√©ponses / la solution du jeu.
        """
        if choix == '1':
            self.plateau = Plateau(10, 8, 10)
            
        elif choix == '2':
            self.plateau = Plateau(18, 14, 40)
            
        elif choix == '3':
            self.plateau = Plateau(24, 20,99)
            
        else:
            print("Choix invalide. La partie ne peut pas commencer.")
            return

        self.plateau.placer_bombes()
        self.jeu_en_cours = True
        print("La partie a commenc√©! Bonne chance!")
       
        self.verifier_victoire()
        
   
        
    def clic_gauche(self, x: int, y: int):
        
        """ M√©thode qui permet de cliquer sur une case pour la r√©v√©ler.
            Impossible si : la partie est termin√©e, la case est d√©j√† r√©v√©l√©e ou la case poss√®de un drapeau.
            Sinon la case est r√©v√©l√©e et si elle n'a pas de bombes adjacentes, cela  d√©clenche la propagation.
            Si la case r√©v√©l√©e est une bombe, √ßa enclenche la d√©faite.
        """
           
        if not self.jeu_en_cours:
            print("La partie est d√©j√† termin√©e.")
            return
        
        case = self.plateau.get_case(x, y)
        
        if case.revelee:
            print("Cette case a d√©j√† √©t√© r√©v√©l√©e.")
            return
        
        if case.drapeau:
            print("Cette case ne peut pas √™tre r√©v√©l√©e car elle porte un drapeau.")
            return
        
        if case.bombe :
            self.plateau.tableau_jeu[x, y] = 'üí£'
        # si la case cliqu√©e est une bombe, le joueur perd
        if case.reveler_case():
            self.defaite()
        else:
            self.propagation_zero(x, y)  
            
        self.verifier_victoire() 
            


    def propagation_zero(self, x: int, y: int):
        """ M√©thode qui affiche les bombes adjacentes pour la case cliqu√©e et propage si aucune bombe n'est adjacente."""
        # marque la case comme r√©v√©l√©e 
        self.plateau.tableau_jeu[x, y] = self.plateau.tableau_reponses[x, y]
        case = self.plateau.get_case(x, y)
        case.revelee = True  
    
        # si aucune bombe adjacente, on d√©clenche la propagation
        if self.plateau.tableau_jeu[x, y] == 0:
            for i in range(x - 1, x + 2):
                for j in range(y - 1, y + 2):
                    if not (0 <= i < self.plateau.taille_x and 0 <= j < self.plateau.taille_y):
                        continue  # ignore les cases hors du plateau
                    
                    if i == x and j == y:
                        continue  # ignore la case centrale
    
                    case_adj = self.plateau.get_case(i, j)
                    if not case_adj.bombe and not case_adj.drapeau and not case_adj.revelee:
                        self.propagation_zero(i, j)


            
    def clic_droit(self, x: int, y: int):
        
        """ M√©thode qui permet de cliquer sur une case pour placer/d√©placer un drapeau.
            Impossible si : la partie est termin√©e, la case est d√©j√† r√©v√©l√©e.
            S'il n'y a pas de drapeau, alors √ßa en place un.
            S'il y a d√©j√† un drapeau, √ßa l'enl√®ve.
        """
        
        if not self.jeu_en_cours:
            print("La partie est d√©j√† termin√©e.")
            return
        
        case = self.plateau.get_case(x, y)
        
        if case.revelee:
            print("Cette case est d√©j√† r√©v√©l√©e. Impossible de poser un drapeau")
            return
        
        else : 
            case.placer_drapeau()
            
            if case.drapeau :
                self.plateau.tableau_jeu[x, y] = 'üö©'
            else :
                self.plateau.tableau_jeu[x, y] = '-'
       
        self.verifier_victoire()                  
             
        
         
    def verifier_victoire(self):
        """ M√©thode qui v√©rifie si le joueur a gagn√© ou non."""
        for x in range(self.plateau.taille_x):
            for y in range(self.plateau.taille_y):
                case = self.plateau.get_case(x, y)
                if not case.bombe and not case.revelee:
                    return False
        self.victoire()
        return True
    
    

    ### 2 petites m√©thodes qui permettent d'afficher des messages en cas de victoire/ d√©faite. Et qui met l'√©tat du jeu en non en cours.
    
    def victoire(self):
        self.jeu_en_cours = False
        print("F√©licitations! Vous avez gagn√©!")


    def defaite(self):
        self.jeu_en_cours = False
        print("Dommage! Vous avez perdu. Une bombe a √©t√© d√©clench√©e.")